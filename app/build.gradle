apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


ext{
    releaseKeyProperties = getSignKeyProperties("releaseKey.properties")
}



android {

    signingConfigs {
        releaseKey {
            storeFile file(releaseKeyProperties['keyStoreFile'])
            storePassword releaseKeyProperties['storePassword']
            keyAlias releaseKeyProperties['alias']
            keyPassword releaseKeyProperties['password']
        }
    }

    compileSdkVersion rootProject.targetSdkVersion
    buildToolsVersion = rootProject.builToolsVersion

    defaultConfig {
        applicationId "com.theplanet.cleanarchitecturecourse"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode versionCode
        versionName versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            debuggable false
            signingConfig signingConfigs.releaseKey
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$appcompat"
    implementation "androidx.core:core-ktx:$ktx"


    //design
    implementation "com.android.support.constraint:constraint-layout:$constraintLayout"
    implementation "androidx.recyclerview:recyclerview:$androidxViews"
    implementation "androidx.cardview:cardview:$androidxViews"

    //ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle"


    //dagger
    implementation "com.google.dagger:dagger:$dagger"
    implementation "com.google.dagger:dagger-android:$dagger"
    implementation "com.google.dagger:dagger-android-support:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"
    compileOnly "javax.annotation:jsr250-api:$javax"

    //RX
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroid"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlin"


    //Retrofit
    implementation group: "com.squareup.okhttp3", name: "okhttp", version: "$okHttp"
    implementation group: "com.squareup.okhttp3", name: "okhttp-urlconnection", version: "$okHttp"
    implementation group: "com.squareup.retrofit2", name: "converter-gson", version: "$retrofit"
    implementation group: "com.squareup.retrofit2", name: "retrofit", version: "$retrofit"
    implementation group: "com.squareup.retrofit2", name: "adapter-rxjava2", version: "$retrofit"



    //testing
    testImplementation "junit:junit:$junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    androidTestImplementation "androidx.test:runner:$testRunner"
    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation "androidx.arch.core:core-testing:$archCore"
    testImplementation "org.powermock:powermock-core:$powerMock"
    testImplementation "org.powermock:powermock-module-junit4:$powerMock"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMock"

}


def getSignKeyProperties(String fileName) {
    def signKey = rootProject.file(fileName)
    def signProperties = new Properties()
    signProperties.load(new FileInputStream(signKey))
    return signProperties
}
